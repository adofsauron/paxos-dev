// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phxkv.proto

#include "phxkv.pb.h"
#include "phxkv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace phxkv {

static const char* PhxKVServer_method_names[] = {
  "/phxkv.PhxKVServer/Put",
  "/phxkv.PhxKVServer/GetLocal",
  "/phxkv.PhxKVServer/GetGlobal",
  "/phxkv.PhxKVServer/Delete",
};

std::unique_ptr< PhxKVServer::Stub> PhxKVServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PhxKVServer::Stub> stub(new PhxKVServer::Stub(channel, options));
  return stub;
}

PhxKVServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Put_(PhxKVServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocal_(PhxKVServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGlobal_(PhxKVServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(PhxKVServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PhxKVServer::Stub::Put(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void PhxKVServer::Stub::async::Put(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::async::Put(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::phxkv::KVResponse, ::phxkv::KVOperator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PhxKVServer::Stub::GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLocal_, context, request, response);
}

void PhxKVServer::Stub::async::GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocal_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::async::GetLocal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::phxkv::KVResponse, ::phxkv::KVOperator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLocal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncGetLocalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLocalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PhxKVServer::Stub::GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGlobal_, context, request, response);
}

void PhxKVServer::Stub::async::GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGlobal_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::async::GetGlobal(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGlobal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::phxkv::KVResponse, ::phxkv::KVOperator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGlobal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncGetGlobalRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGlobalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PhxKVServer::Stub::Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::phxkv::KVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void PhxKVServer::Stub::async::Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void PhxKVServer::Stub::async::Delete(::grpc::ClientContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::phxkv::KVResponse, ::phxkv::KVOperator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::phxkv::KVResponse>* PhxKVServer::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::phxkv::KVOperator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

PhxKVServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PhxKVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PhxKVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->GetLocal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PhxKVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->GetGlobal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhxKVServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhxKVServer::Service, ::phxkv::KVOperator, ::phxkv::KVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PhxKVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::phxkv::KVOperator* req,
             ::phxkv::KVResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

PhxKVServer::Service::~Service() {
}

::grpc::Status PhxKVServer::Service::Put(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::GetLocal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::GetGlobal(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhxKVServer::Service::Delete(::grpc::ServerContext* context, const ::phxkv::KVOperator* request, ::phxkv::KVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace phxkv

